#!/usr/bin/env python3

import yaml
import json
import sys

def t(d):
    if arch not in d:
        return []
    return d[arch]

def dif(a,b):
    return [x for x in a if x not in b]

def print_usage():
    print("Usage: {} <os> <arch> <compiler>".format(sys.argv[0]))

if len(sys.argv) < 4:
    print_usage()
    sys.exit(1)

# read in target operating system, architecture, and compiler from cli args
opsys, arch, compiler = sys.argv[1], sys.argv[2], sys.argv[3]

# load the spack environment master template
dd = yaml.safe_load(open("master.yaml"))
nfdd = {"spack":dd["spack"]}
spack = nfdd["spack"]

# create a spack.yaml to store the final, derivative spack environment
of = open('spack.yaml','w')

# add specs
specs = dif(dd['specs'], t(dd['specs-exclude']))
spack['definitions'] = [
    {"e4s": specs},
    {"arch": ["{compiler} arch=linux-{opsys}-{arch}".format(compiler=compiler, opsys=opsys, arch=arch)]}
]
spack['specs'] = [{"matrix": [['$e4s'],['$arch']]}]

# save dynamically generated spack environment
yaml.dump({"spack":spack}, of, default_flow_style=False)
of.close()
